% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fisher_sim.R
\name{fisher.sim}
\alias{fisher.sim}
\title{fisher.sim}
\usage{
fisher.sim(
  x,
  N,
  streams,
  Nglobal,
  type = getOption("type", default = c("float", "double")[1 +
    gpuR::gpuInfo()$double_support]),
  returnStatistics = getOption("returnStatistics", default = FALSE),
  verbose = getOption("verbose", default = FALSE)
)
}
\arguments{
\item{x}{a vclMatrix object of integer numbers}

\item{N}{a integer number specifying number of replicates}

\item{streams}{a vclMatrix of streams. Default using GPU streams with package default initial seeds}

\item{Nglobal}{a (non-empty) integer vector specifying size of the index space on GPU for use}

\item{type}{a character string specifying "double" or "float" of the returned test statistics}

\item{returnStatistics}{a logical value, if TRUE, return test statistics}

\item{verbose}{a logical value, if TRUE, print extra information}
}
\value{
a htest object of p-value and actual number of replicates and a list test statistics, streams, threshold
}
\description{
Performs Monte carlo's simulation for Fisher's exact test on GPU
}
\examples{
setContext(grep("gpu", listContexts()$device_type)[1])
Job <- matrix(c(1,2,1,0, 3,3,6,1, 10,10,14,9, 6,7,12,11), 4, 4)
Job <- gpuR::vclMatrix(Job, type="integer")
streams <- createStreamsGpu(64*16)
result <- fisher.sim(Job, 1e5, streams=streams, Nglobal = c(64,16))
result$streams
result$simNum
result$thresold 

}
